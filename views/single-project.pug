extends layout

block content
    link(rel="stylesheet" href="/stylesheets/single-project.css")
    script(type='text/javascript' src="/javascripts/credits-popup.js" defer)

    div#single-project-section

        div#single-project-content-container

            h2#single-project-header.fade-up(data-aos="fade-up")=data.project_name 

            if data.description
                h4#single-project-subheader.fade-up-200(data-aos="fade-up" data-aos-delay=200)=data.description

            if data.client_name
                p#client-name.fade-up-400(data-aos="fade-up" data-aos-delay=400)= 'Created for: ' + data.client_name

            if data.date_completed
                p#date-completed.fade-up-400(data-aos="fade-up" data-aos-delay=400)= 'Completed on: ' + data.date_completed

            unless data.credits === '{}'
                - data.credits = JSON.parse(data.credits);
                div#project-credits-button.fade-up-600(data-aos="fade-up" data-aos-delay=600) Project Credits 
                    div#project-credits-popup.hidden-fade
                        span#credits-exit-icon.fas.fa-times
                        div#arrow
                        each val, key in data.credits
                            p#credit= key + ': ' + val

            -
                //- Create one array each for mobile and desktop inside media URLs, using generateFileURL algo
                data.mobile_inside_media = JSON.parse(data.mobile_inside_media)
                const mobileURLs = [];
                data.mobile_inside_media.forEach((fileName) => {
                    mobileURLs.push(generateFileURL.insideMedia(data.slug, fileName) );
                });
                data.desktop_inside_media = JSON.parse(data.desktop_inside_media)
                const desktopURLs = [];
                data.desktop_inside_media.forEach((fileName) => {
                    desktopURLs.push(generateFileURL.insideMedia(data.slug, fileName) );
                })
                //- console.log('mobile urls', mobileURLs)

            //- Note that we are rendering images inside a picture element. This will save bandwidth and only render the image on the correct screen size (< or > 700px). Unfortunately, this doesn't seem to work for video elements. Either way, the media will only display if it is the right screen size, based on our global classes 'mobile' and 'desktop'.
            each url in mobileURLs
                - const ext = extname(url)
                if constants.allowedImageTypes.includes(ext)
                    picture.single-project-inside-media.mobile
                        source(data-srcset=url media="(max-width: 700px)")
                        img.lazyload.fade-up(data-src=url data-aos="fade-up")

                else if constants.allowedVideoTypes.includes(ext)
                    div.single-project-inside-media.mobile
                        video.inside-media-video.fade-up(controls preload="metadata" data-aos="fade-up")
                            source(src=url type=`video/${ext.replace('.', '')}`)

            each url in desktopURLs
                - const ext = extname(url)

                if constants.allowedImageTypes.includes(ext)
                    picture.single-project-inside-media.desktop
                        source(data-srcset=url media="(min-width: 700px)")
                        img.lazyload.fade-up-scroll(data-src=url data-aos="fade-up")


                else if constants.allowedVideoTypes.includes(ext)
                    div.single-project-inside-media.desktop
                        video.inside-media-video.fade-up-scroll(controls preload="metadata" data-aos="fade-up")
                            source(src=url type=`video/${ext.replace('.', '')}`)

    script.
        function logUpdate(elem) {
            //- console.log(elem.src, elem.naturalHeight)
            //- if(elem.naturalHeight < 290 && elem.src.includes('images')) {
            //-     requestAnimationFrame(() => logUpdate(elem))
            //- }
            
        }

        document.querySelectorAll('img')
            .forEach((img) =>
                img.addEventListener('load', () => {
                //- requestAnimationFrame(() =>{
                //-     requestAnimationFrame(AOS.refresh)
                //- })
                    //- console.log(img.complete)
                    requestAnimationFrame(() => logUpdate(img))
                }
            )
        );

        document.querySelectorAll('video')
            .forEach((video) =>
                video.addEventListener('load', () =>
                AOS.refresh()
            )
        );
